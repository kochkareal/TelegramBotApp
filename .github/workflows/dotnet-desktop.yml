name: "TelegramBotApp"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: TelegramBotApp.sln                                        # Имя решения.
      Test_Project_Path: TelegramBotApp.Tests/TelegramBotApp.Tests.csproj      # Путь к тестовому проекту.
      Wap_Project_Directory: TelegramBotApp.Package                            # Директория WAP-проекта.
      Wap_Project_Path: TelegramBotApp.Package/TelegramBotApp.Package.wapproj  # Путь к WAP-проекту.
      Configuration: Release                                                   # Конфигурация.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Установка .NET Core SDK
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Добавление MSBuild в PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Выполнение всех модульных тестов в решении
    # - name: Execute unit tests
    #   run: dotnet test ${{ env.Test_Project_Path }}

    # # Восстановление приложения
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

    # # Декодирование base64 закодированного pfx и сохранение сертификата
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Создание пакета приложения
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ env.Configuration }}

    # # Удаление pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # # Загрузка MSIX пакета
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
